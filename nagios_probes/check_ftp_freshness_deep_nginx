#!/usr/bin/ruby
=begin

check ftp.ccc.de freshness on nginx by checking INDEX.gz content

=end

require 'open-uri'
require 'zlib'
require "optparse"

OPTIONS = { 
  :fqdn           => 'ftp.ccc.de',
  :master_ip      => '212.201.68.160',
  :freshness_file => 'INDEX.gz',
  :verbose        => false,
}
ARGV.options do |opt|
  opt.banner = "Usage: ruby #{$0} ip"
  opt.on('-f', '--fqdn', 'check this vhost') { |v| OPTIONS[:fqdn] = v }
  opt.on('-m', '--master', 'IP of the master http server') { |v| OPTIONS[:fqdn] = v }
  opt.on('-i', '--file', 'check freshness by comparing this file') { |v| OPTIONS[:freshness_file] = v }
  opt.on("-v", "--verbose", "enable verbose output") { |v| OPTIONS[:verbose] = v }
  opt.on("-h", "--help", "Show this help message.") { puts opt; exit }
  opt.parse!
end 

if ARGV[0]
    slave_ip = ARGV[0]
else
    hosts = `host -t A #{OPTIONS[:fqdn]}`.lines.collect {|l| l.split(' ')[3] }
    slave_ip = hosts[ rand hosts.length ]
end

class ServerInfo
  def initialize(ip='127.0.0.1')
    @ip = ip
    retrieve_freshness_file
  end
  attr_reader :ip, :ftp_listing

  def ==(comparee)
    return true if comparee.equal?(self)
    return true if comparee.ftp_listing == self.ftp_listing
    return false
  end

  protected
  def retrieve_freshness_file
    begin
    open( "http://#{@ip}/#{OPTIONS[:freshness_file]}", 'Host' => OPTIONS[:fqdn] ) { |f|
      gzio = Zlib::GzipReader.new(f)
      @ftp_listing = gzio.readlines
    }
    rescue
      @ftp_listing = []
      raise "failed to retrieve file"
    end
  end

end

begin
  master = ServerInfo.new( OPTIONS[:master_ip] )
  slave = ServerInfo.new( slave_ip )
  message = "OK: #{slave.ip} is synchronized"
  retval = 0 # ok

  unless master == slave
    #retval = 1 # warning
    message = "CRITICAL: #{slave.ip} not in sync"
    retval = 2 # critical
    p master.ftp_listing - slave.ftp_listing if OPTIONS[:verbose]
  end

rescue => ex
  p ex
  message = "UNKNOWN: an error occured while checking ftp freshness"
  retval = 3 # unknown
end

puts message
exit retval
