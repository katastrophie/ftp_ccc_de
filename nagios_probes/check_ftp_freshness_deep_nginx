#!/usr/bin/ruby
=begin

check ftp.ccc.de freshness on nginx by checking INDEX.gz content

=end

require 'open-uri'
require 'zlib'
require "optparse"

OPTIONS = { 
  :fqdn           => 'ftp.ccc.de',
  :master_ip      => '212.201.68.160',
  :freshness_file => 'INDEX.gz',
  :verbose        => false,
}
ARGV.options do |opt|
  opt.banner = "Usage: ruby #{$0} ip"
  opt.on('-f', '--fqdn', 'check this vhost') { |v| OPTIONS[:fqdn] = v }
  opt.on('-m', '--master', 'IP of the master http server') { |v| OPTIONS[:fqdn] = v }
  opt.on('-i', '--file', 'check freshness by comparing this file') { |v| OPTIONS[:freshness_file] = v }
  opt.on("-v", "--verbose", "enable verbose output") { |v| OPTIONS[:verbose] = v }
  opt.on("-h", "--help", "Show this help message.") { puts opt; exit }
  opt.parse!
end 

if ARGV[0]
    slave_ip = ARGV[0]
else
    # DEBUG, not for nagios
    hosts = `host -t A #{OPTIONS[:fqdn]}`.lines.collect {|l| l.split(' ')[3] }
end

class ServerInfo
  def initialize(ip='127.0.0.1')
    @ip = ip
    retrieve_freshness_file
  end
  attr_reader :ip, :ftp_listing

  def ==(comparee)
    return true if comparee.equal?(self)
    return true if comparee.ftp_listing == self.ftp_listing
    return false
  end

  protected
  def retrieve_freshness_file
    begin
    #open( "ftp://#{@ip}/#{OPTIONS[:freshness_file]}" ) { |f|
    open( "http://#{@ip}/#{OPTIONS[:freshness_file]}", 'Host' => OPTIONS[:fqdn] ) { |f|
      gzio = Zlib::GzipReader.new(f, :external_encoding => 'utf-8', 
                                  :internal_encoding => 'iso-8859-15', 
                                  :invalid => :replace
                                 )
      @ftp_listing = gzio.readlines
    }
    rescue
      @ftp_listing = []
      raise "failed to retrieve file"
    end
  end

end

def check_freshness(slave_ip)
  begin
    master = ServerInfo.new( OPTIONS[:master_ip] )
    slave = ServerInfo.new( slave_ip )
    message = "OK: #{slave.ip} is synchronized"
    retval = 0 # ok

    unless master == slave
      #retval = 1 # warning
      message = "CRITICAL: #{slave.ip} not in sync"
      retval = 2 # critical
      if OPTIONS[:verbose]
          difference = master.ftp_listing - slave.ftp_listing 
          STDERR.puts "#{difference.length} entries don't match:" 
          STDERR.puts "    #{difference[0]}"
          STDERR.puts "    #{difference[-1]}"
          STDERR.puts "MASTER: " + master.ftp_listing.select { |l| l.match(/INDEX$/) }.inspect
          STDERR.puts "SLAVE: " + slave.ftp_listing.select { |l| l.match(/INDEX$/) }.inspect
      end
    end

  rescue => ex
    STDERR.puts ex.inspect
    message = "UNKNOWN: an error occured while checking ftp freshness"
    retval = 3 # unknown
  end

  { :message => message, :retval => retval }
end

if slave_ip
  result = check_freshness( slave_ip )
  puts result[:message]
  exit result[:retval]

else
  # DEBUG, not for nagios
  OPTIONS[:verbose] = true
  hosts.each { |slave_ip|
    STDERR.puts "[ -- ] #{slave_ip}"
    result = check_freshness( slave_ip )
    STDERR.puts result[:message]
  }
  puts "UNKNOWN: not a nagios check"
  exit 3 # unknown
end

